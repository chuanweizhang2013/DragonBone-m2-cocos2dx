<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="addedToStageHandler(event)"
		 width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!-- Most codes of this class are copied from ArmatureDisplayUIsGroup. Todo: refine this class and ArmatureDisplayUIsGroup-->
	<fx:Script>
		<![CDATA[
			import dragonBones.Armature;
			
			private static const MIN_SCALE:Number = 0.2;
			private static const MAX_SCALE:Number = 10;
			
			private var _armature:Armature;
			private var _viewScale:Number = 1;
			
			private var _armatureContainer:Sprite;
			private var _bgShape:Shape;
			private var _originLineX:Shape;
			private var _originlineY:Shape;
			
			private var _armatreArea:Rectangle;
			private var _isDragedArmature:Boolean;
			private var _pointDragGlobal:Point = new Point();
			private var _pointScrollBarDrag:Point = new Point();
			private var _isMouseDown:Boolean;
			
			[Bindable]
			public function get armature():Armature
			{
				return _armature;
			}

			public function set armature(value:Armature):void
			{
				if(_armature)
					_armatureContainer.removeChild(_armature.display as DisplayObject);
				_armature = value;
				if(_armature)
				{
					_armatureContainer.addChild(_armature.display as DisplayObject);
					_armature.display.scaleX = _armature.display.scaleY = _viewScale;
				}
			}
			
			
			[Bindable]
			public function get viewScale():Number
			{
				return _viewScale;
			}
			public function set viewScale(value:Number):void
			{
				if(value < MIN_SCALE)
				{
					value = MIN_SCALE;
				}
				else if(value > MAX_SCALE)
				{
					value = MAX_SCALE;
				}
				_viewScale = value;
				if(_armature)
				{
					_armature.display.scaleX = _armature.display.scaleY = _viewScale;
				}
			}
			
			private function addedToStageHandler(event:Event):void
			{
				
				_armatureContainer = new Sprite();
				
				_bgShape = new Shape();
				_bgShape.graphics.beginFill(0xFF00FF, 0);
				_bgShape.graphics.drawRect(0,0,10,10);
				
				_originLineX = new Shape();
				_originLineX.cacheAsBitmap = true;
				_originLineX.x = -1;
				_originlineY = new Shape();
				_originlineY.cacheAsBitmap = true;
				_originlineY.y = -1;
				_originLineX.graphics.lineStyle(0, 0x999999,1,true);
				_originLineX.graphics.lineTo(0,2048);
				_originlineY.graphics.lineStyle(0, 0x999999,1,true);
				_originlineY.graphics.lineTo(2048,0);
				
				_armatureContainer.buttonMode = true;
				_armatureContainer.doubleClickEnabled = true;
				_armatureContainer.addChild(_bgShape);
				_armatureContainer.addEventListener(Event.ENTER_FRAME, enterFrameHandler);
				
				_armatureContainer.addEventListener(MouseEvent.MOUSE_DOWN, containerMouseHandler);
				_armatureContainer.addEventListener(MouseEvent.MOUSE_WHEEL, containerMouseHandler);
				_armatureContainer.addEventListener(MouseEvent.DOUBLE_CLICK, containerMouseHandler);
				
				viewContainer.addChild(_originLineX);
				viewContainer.addChild(_originlineY);
				viewContainer.addChild(_armatureContainer);
			}
			private function containerMouseHandler(e:MouseEvent):void
			{
				var display:Object = _armature?_armature.display:null;
				if(!display)
				{
					return;
				}
				switch(e.type)
				{
					case MouseEvent.MOUSE_DOWN:
						_isMouseDown = true;
						Mouse.cursor = MouseCursor.HAND;
						_pointDragGlobal.x = stage.mouseX;
						_pointDragGlobal.y = stage.mouseY;
						_pointScrollBarDrag.x = scrollerViewer.horizontalScrollBar.value;
						_pointScrollBarDrag.y = scrollerViewer.verticalScrollBar.value;
						
						if(stage)
						{
							stage.addEventListener(MouseEvent.MOUSE_UP, containerMouseHandler);
						}
						_isDragedArmature = true;
						
						break;
					case MouseEvent.MOUSE_UP:
						_armatureContainer.removeEventListener(MouseEvent.MOUSE_MOVE, containerMouseHandler);
						if(stage)
						{
							stage.removeEventListener(MouseEvent.MOUSE_UP, containerMouseHandler);
						}
						_isMouseDown = false;
						Mouse.cursor = MouseCursor.AUTO;
						break;
					case MouseEvent.DOUBLE_CLICK:
						_isDragedArmature = false;
						viewScale = 1;
						break;
						break;
					case MouseEvent.MOUSE_WHEEL:
						e.delta > 0?(viewScale += 0.2):(viewScale -= 0.2);
						break;
				}
			}
			
			private function enterFrameHandler(e:Event):void
			{
				var display:Object = _armature?_armature.display:null;
				if(display)
				{
					_armature
					var rect:Rectangle = display.getRect(display);
					
					if(_armatreArea)
					{
						_armatreArea.left = Math.min(_armatreArea.left, rect.left);
						_armatreArea.top = Math.min(_armatreArea.top, rect.top);
						_armatreArea.right = Math.max(_armatreArea.right, rect.right);
						_armatreArea.bottom = Math.max(_armatreArea.bottom, rect.bottom);
					}
					else
					{
						_armatreArea = rect;
					}
					
					var x:int = _armatreArea.x * _viewScale;
					var y:int = _armatreArea.y * _viewScale;
					var width:int = _armatreArea.width * _viewScale;
					var height:int = _armatreArea.height * _viewScale;
					
					var isSmallW:Boolean;
					var isSmallH:Boolean;
					if(width < this.width)
					{
						isSmallW = true;
						display.x = (this.width - width) * 0.5 - x;
					}
					else
					{
						width += 200;
						display.x = 100 - x;
					}
					
					if(height < this.height)
					{
						isSmallH = true;
						display.y = (this.height - height) * 0.5 - y;
					}
					else
					{
						height += 120;
						display.y = 60 - y;
					}
					
					
					if(isSmallW && isSmallH)
					{
						_isDragedArmature = false;
					}
					
					_originLineX.x = display.x;
					_originlineY.y = display.y;
					
					_bgShape.width = viewContainerGroup.width = Math.max(width, this.width);
					_bgShape.height = viewContainerGroup.height = Math.max(height, this.height);
					
					if(_isDragedArmature)
					{
						if(_isMouseDown)
						{
							scrollerViewer.horizontalScrollBar.value = _pointDragGlobal.x - stage.mouseX + _pointScrollBarDrag.x;
							scrollerViewer.verticalScrollBar.value = _pointDragGlobal.y - stage.mouseY + _pointScrollBarDrag.y;
						}
					}
					else
					{
						scrollerViewer.horizontalScrollBar.value = (width - this.width) * 0.5;
						scrollerViewer.verticalScrollBar.value = (height - this.height) * 0.5;
					}
					
				}
			}

		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:Scroller id="scrollerViewer" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<s:Group>
			<s:Group id="viewContainerGroup">
				<mx:UIComponent id="viewContainer"/>
			</s:Group>
		</s:Group>
	</s:Scroller>
	<s:Button id="btnZoomOut" x="5" y="5" width="35" height="20" label="－" click="viewScale-=0.1"/>
	<s:Button id="btnZoomIn" x="150" y="5" width="35" height="20" label="＋" click="viewScale+=0.1"/>
	<s:HSlider id="sliderScale" x="45" y="10" width="100"
			   minimum="{MIN_SCALE}" maximum="{MAX_SCALE}" snapInterval="0.1" value="@{viewScale}"/>
</s:Group>
