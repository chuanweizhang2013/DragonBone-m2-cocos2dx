<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="view.components.*"
		 creationComplete="addedToStageHandler(event)"
		 >
	<fx:Script>
		<![CDATA[
			import dragonBones.Armature;
			import dragonBones.Bone;
			import dragonBones.objects.BoneData;
			import dragonBones.utils.dragonBones_internal;
			
			import flash.filters.GlowFilter;
			import flash.ui.Mouse;
			import flash.ui.MouseCursor;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.SettingDataProxy;
			
			import mx.effects.Pause;
			
			import utils.getPointTarget;
			
			use namespace dragonBones_internal;
			
			[Embed(source="./assets/play_icon.png", mimeType = "application/octet-stream")]
			private static const PlayBitmap:Class;
			[Embed(source="./assets/pause_icon.png", mimeType = "application/octet-stream")]
			private static const PauseBitmap:Class;
			
			private static const MIN_SCALE:Number = 0.2;
			private static const MAX_SCALE:Number = 10;
			
			private var _playBitmap:Object = new PlayBitmap();
			private var _pauseBitmap:Object = new PauseBitmap();
			
			private static var _pointHelp:Point = new Point();
			
			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private var _armatureContainer:Sprite;
			private var _bgShape:Shape;
			private var _originLineX:Shape;
			private var _originlineY:Shape;
			private var _boneDisplaySelected:Object;
			private var _boneDisplayRollOver:Object;
			private var _boneHighlightFilter:GlowFilter;
			private var _boneRolloverFilter:GlowFilter;
			
			private var _isDragedArmature:Boolean;
			private var _pointDragGlobal:Point = new Point();
			private var _pointScrollBarDrag:Point = new Point();
			
			private var _armatreArea:Rectangle;
			
			private var _boneSymbol:BoneSymbol;
			
			private var _isMouseIn:Boolean;
			private var _isMouseDown:Boolean;
			
			private var _viewScale:Number = 1;
			public function get viewScale():Number
			{
				return _viewScale;
			}
			public function set viewScale(value:Number):void
			{
				if(value < MIN_SCALE)
				{
					value = MIN_SCALE;
				}
				else if(value > MAX_SCALE)
				{
					value = MAX_SCALE;
				}
				_viewScale = value;
				if(_armatureDisplay)
				{
					_armatureDisplay.scaleX = _armatureDisplay.scaleY = _viewScale;
				}
				sliderScale.value = _viewScale;
			}
			
			private function get _armatureDisplay():DisplayObjectContainer
			{
				return (_importDataProxy.armature?_importDataProxy.armature.display:null) as DisplayObjectContainer;
			}
			
			private function addedToStageHandler(event:Event):void
			{
				updatePlayAndPauseBtn();
				
				var color:uint = SettingDataProxy.getInstance().getData(SettingDataProxy.BONE_HIGHLIGHT_COLOR);
				_boneHighlightFilter = new GlowFilter(color,0.5,8,8,4);
				_boneRolloverFilter = new GlowFilter(color,0.5,2,2,32);
				
				_armatureContainer = new Sprite();
				
				_boneSymbol = new BoneSymbol();
				_boneSymbol.mouseChildren = false;
				_boneSymbol.mouseEnabled = false;
				_boneSymbol.blendMode = BlendMode.LAYER;
				_boneSymbol.alpha = 0.6;
				_boneSymbol.visible = false;
				
				_boneSymbol.filters =[new GlowFilter(0x000000, 1, 4, 4, 2)];
				
				_bgShape = new Shape();
				_bgShape.graphics.beginFill(0xFF00FF, 0);
				_bgShape.graphics.drawRect(0,0,10,10);
				
				_originLineX = new Shape();
				_originLineX.cacheAsBitmap = true;
				_originLineX.x = -1;
				_originlineY = new Shape();
				_originlineY.cacheAsBitmap = true;
				_originlineY.y = -1;
				_originLineX.graphics.lineStyle(0, 0x999999,1,true);
				_originLineX.graphics.lineTo(0,2048);
				_originlineY.graphics.lineStyle(0, 0x999999,1,true);
				_originlineY.graphics.lineTo(2048,0);
				
				_armatureContainer.buttonMode = true;
				_armatureContainer.doubleClickEnabled = true;
				_armatureContainer.addChild(_bgShape);
				_armatureContainer.addEventListener(Event.ENTER_FRAME, enterFrameHandler);
				
				_armatureContainer.addEventListener(MouseEvent.ROLL_OVER, containerMouseHandler);
				_armatureContainer.addEventListener(MouseEvent.ROLL_OUT, containerMouseHandler);
				_armatureContainer.addEventListener(MouseEvent.MOUSE_DOWN, containerMouseHandler);
				_armatureContainer.addEventListener(MouseEvent.MOUSE_WHEEL, containerMouseHandler);
				_armatureContainer.addEventListener(MouseEvent.DOUBLE_CLICK, containerMouseHandler);
				
				viewContainer.addChild(_originLineX);
				viewContainer.addChild(_originlineY);
				viewContainer.addChild(_armatureContainer);
				
				playBtn.addEventListener(MouseEvent.CLICK, playBtnHandler);
				
				btnZoomIn.addEventListener(MouseEvent.CLICK, scaleHandler);
				btnZoomOut.addEventListener(MouseEvent.CLICK, scaleHandler);
				sliderScale.addEventListener(Event.CHANGE, scaleHandler);
				
				scrollerViewer.horizontalScrollBar.addEventListener(MouseEvent.MOUSE_DOWN, scrollBarHandler);
				scrollerViewer.verticalScrollBar.addEventListener(MouseEvent.MOUSE_DOWN, scrollBarHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SETTING_DATA_CHANGE, settingHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ARMATURE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_DATA, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_CHANGE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_START, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.MOVEMENT_COMPLETE, commandHandler);
				
			}
			
			private function settingHandler(e:Message):void
			{
				var settingID:String = e.parameters[0];
				var value:Object = e.parameters[1];
				switch(settingID)
				{
					case SettingDataProxy.BONE_HIGHLIGHT_COLOR:
						_boneRolloverFilter.color = _boneHighlightFilter.color = value as uint;
						highlightBoneDisplay();
						break;
					case SettingDataProxy.LANGUAGE_ID:
						updatePlayAndPauseBtn();
						break;
				}
			}
			
			private function commandHandler(e:Message):void
			{
				switch(e.type)
				{
					case MessageDispatcher.CHANGE_ARMATURE_DATA:
						_isDragedArmature = false;
						_armatreArea = null;
						_boneDisplayRollOver = null;
						_boneDisplaySelected = null;
						//armatureContainer.removeChildren();
						var length:uint = _armatureContainer.numChildren;
						for(var i:int = length - 1;i >= 0;i --)
						{
							_armatureContainer.removeChildAt(i);
						}
						
						if(_armatureDisplay)
						{
							_armatureContainer.addChild(_bgShape);
							_armatureContainer.addChild(_armatureDisplay);
							for(i = _armatureDisplay.numChildren - 1; i >= 0;i --)
							{
								var child:Sprite = _armatureDisplay.getChildAt(i) as Sprite;
								if(child)
								{
									child.mouseChildren = false;
								}
							}
						}
						viewScale = viewScale;
						break;
					case MessageDispatcher.CHANGE_BONE_DATA:
						highlightBoneDisplay();
						break;
					case MessageDispatcher.MOVEMENT_CHANGE:
						break;
					case MessageDispatcher.MOVEMENT_START:
					case MessageDispatcher.MOVEMENT_COMPLETE:
						updatePlayAndPauseBtn();
						break;
				}
			}
			
			private function enterFrameHandler(e:Event):void
			{
				_importDataProxy.render();
				var display:Object = _armatureDisplay;
				if(display)
				{
					var rect:Rectangle = display.getRect(display);
					
					if(_armatreArea)
					{
						_armatreArea.left = Math.min(_armatreArea.left, rect.left);
						_armatreArea.top = Math.min(_armatreArea.top, rect.top);
						_armatreArea.right = Math.max(_armatreArea.right, rect.right);
						_armatreArea.bottom = Math.max(_armatreArea.bottom, rect.bottom);
					}
					else
					{
						_armatreArea = rect;
					}
					
					var x:int = _armatreArea.x * _viewScale;
					var y:int = _armatreArea.y * _viewScale;
					var width:int = _armatreArea.width * _viewScale;
					var height:int = _armatreArea.height * _viewScale;
					
					var isSmallW:Boolean;
					var isSmallH:Boolean;
					if(width < this.width)
					{
						isSmallW = true;
						display.x = (this.width - width) * 0.5 - x;
					}
					else
					{
						width += 200;
						display.x = 100 - x;
					}
					
					if(height < this.height)
					{
						isSmallH = true;
						display.y = (this.height - height) * 0.5 - y;
					}
					else
					{
						height += 120;
						display.y = 60 - y;
					}
					
					
					if(isSmallW && isSmallH)
					{
						_isDragedArmature = false;
					}
					
					_originLineX.x = display.x;
					_originlineY.y = display.y;
					
					_bgShape.width = viewContainerGroup.width = Math.max(width, this.width);
					_bgShape.height = viewContainerGroup.height = Math.max(height, this.height);
					
					if(_isDragedArmature)
					{
						if(_isMouseDown && !_boneSymbol.visible)
						{
							scrollerViewer.horizontalScrollBar.value = _pointDragGlobal.x - stage.mouseX + _pointScrollBarDrag.x;
							scrollerViewer.verticalScrollBar.value = _pointDragGlobal.y - stage.mouseY + _pointScrollBarDrag.y;
						}
					}
					else
					{
						scrollerViewer.horizontalScrollBar.value = (width - this.width) * 0.5;
						scrollerViewer.verticalScrollBar.value = (height - this.height) * 0.5;
					}
					
					updateOverAndOut();
					updateBoneBinder();
				}
			}
			
			private function scrollBarHandler(e:Event):void
			{
				_isDragedArmature = true;
			}
			
			private function containerMouseHandler(e:MouseEvent):void
			{
				var display:DisplayObjectContainer = _armatureDisplay;
				if(!display)
				{
					return;
				}
				var mouseTarget:DisplayObject;
				switch(e.type)
				{
					case MouseEvent.ROLL_OVER:
						_isMouseIn = true;
						break;
					case MouseEvent.ROLL_OUT:
						_isMouseIn = false;
						break;
					case MouseEvent.MOUSE_DOWN:
						mouseTarget = updateOverAndOut();
						_isMouseDown = true;
						Mouse.cursor = MouseCursor.HAND;
						
						_pointDragGlobal.x = stage.mouseX;
						_pointDragGlobal.y = stage.mouseY;
						_pointScrollBarDrag.x = scrollerViewer.horizontalScrollBar.value;
						_pointScrollBarDrag.y = scrollerViewer.verticalScrollBar.value;
						
						if(stage)
						{
							stage.addEventListener(MouseEvent.MOUSE_UP, containerMouseHandler);
						}
						
						if(mouseTarget && mouseTarget == _boneDisplaySelected)
						{
							_armatureContainer.addEventListener(MouseEvent.MOUSE_MOVE, containerMouseHandler);
						}
						else
						{
							_isDragedArmature = true;
						}
						break;
					case MouseEvent.MOUSE_UP:
						_armatureContainer.removeEventListener(MouseEvent.MOUSE_MOVE, containerMouseHandler);
						if(stage)
						{
							stage.removeEventListener(MouseEvent.MOUSE_UP, containerMouseHandler);
						}
						mouseTarget = updateOverAndOut();
						_isMouseDown = false;
						Mouse.cursor = MouseCursor.AUTO;
						
						
						if(_boneSymbol.visible)
						{
							_boneSymbol.visible = false;
							if(_boneDisplaySelected && _boneDisplayRollOver && mouseTarget == _boneDisplayRollOver)
							{
								boneAddToParent();
							}
						}
						else if(mouseTarget)
						{
							selectedBoneByDisplay(mouseTarget);
						}
						break;
					case MouseEvent.DOUBLE_CLICK:
						_isDragedArmature = false;
						viewScale = 1;
						break;
					case MouseEvent.MOUSE_MOVE:
						_armatureContainer.removeEventListener(MouseEvent.MOUSE_MOVE, containerMouseHandler);
						_armatureContainer.addChild(_boneSymbol);
						_boneSymbol.visible = true;
						break;
					case MouseEvent.MOUSE_WHEEL:
						e.delta > 0?(viewScale += 0.2):(viewScale -= 0.2);
						break;
				}
			}
			
			private function scaleHandler(_e:Event):void
			{
				switch(_e.target)
				{
					case btnZoomIn:
						viewScale += 0.5;
						break;
					case btnZoomOut:
						viewScale -= 0.5;
						break;
					case sliderScale:
						viewScale = sliderScale.value;
						break;
				}
			}
			
			private function updateOverAndOut():DisplayObject
			{
				var display:DisplayObjectContainer = _armatureDisplay;
				if(_isMouseIn)
				{
					_pointHelp.x = display.mouseX;
					_pointHelp.y = display.mouseY;
					
					var filtersBackup:Array = [];
					var numChildren:uint = display.numChildren;
					
					for(var i:int = 0;i < numChildren;i ++)
					{
						var childDisplay:DisplayObject = display.getChildAt(i);
						filtersBackup[i] = childDisplay.filters;
						childDisplay.filters = null;
					}
					
					var mouseTarget:DisplayObject = getPointTarget(display, _pointHelp, 2);
					
					for(i = 0;i < numChildren;i ++)
					{
						childDisplay = display.getChildAt(i);
						childDisplay.filters = filtersBackup[i];
					}
					
					if(mouseTarget != _boneDisplayRollOver)
					{
						if(_boneDisplayRollOver && _boneDisplayRollOver != _boneDisplaySelected)
						{
							_boneDisplayRollOver.filters = null;
							_boneDisplayRollOver = null;
						}
						
						if(mouseTarget && mouseTarget != _boneDisplaySelected)
						{
							if(_boneDisplaySelected && _isMouseDown)
							{
								if(!checkBoneParent(mouseTarget, _boneDisplaySelected))
								{
									return null;
								}
							}
							
							_boneDisplayRollOver = mouseTarget;
							if(_boneRolloverFilter.color)
							{
								_boneDisplayRollOver.filters = [_boneRolloverFilter];
							}
						}
					}
				}
				else if(_boneDisplayRollOver && _boneDisplayRollOver != _boneDisplaySelected)
				{
					_boneDisplayRollOver.filters = null;
					_boneDisplayRollOver = null;
				}
				return mouseTarget;
			}
			
			private function updateBoneBinder():void
			{
				if(_boneSymbol.visible)
				{
					var bone:Bone = _importDataProxy.armature.getBoneByDisplay(_boneDisplaySelected);
					
					_pointHelp.x = bone.global.x;
					_pointHelp.y = bone.global.y;
					_pointHelp = _armatureDisplay.localToGlobal(_pointHelp);
					_pointHelp = _armatureContainer.globalToLocal(_pointHelp);
					_boneSymbol.x = _pointHelp.x;
					_boneSymbol.y = _pointHelp.y;
					
					var dX:Number = _armatureContainer.mouseX - _boneSymbol.x;
					var dY:Number = _armatureContainer.mouseY - _boneSymbol.y;
					var radian:Number = Math.atan2(dY, dX);
					var radius:Number = Math.sqrt(dX * dX + dY * dY);
					
					_boneSymbol.rotation = radian * 180 / Math.PI;
					_boneSymbol.line.width = radius;
				}
			}
			
			private function checkBoneParent(display:Object, parentDisplay:Object):Boolean
			{
				var bone:Bone = _importDataProxy.armature.getBoneByDisplay(display);
				if(bone)
				{
					var boneName:String = bone.name;
				}
				bone = _importDataProxy.armature.getBoneByDisplay(parentDisplay);
				if(bone)
				{
					var boneParentName:String = bone.name;
				}
				
				return _importDataProxy.armatureDataProxy.checkParent(boneName, boneParentName);
			}
			
			private function boneAddToParent():void
			{
				var bone:Bone = _importDataProxy.armature.getBoneByDisplay(_boneDisplayRollOver);
				if(bone)
				{
					var boneName:String = bone.name;
				}
				bone = _importDataProxy.armature.getBoneByDisplay(_boneDisplaySelected);
				if(bone)
				{
					var boneParentName:String = bone.name;
				}
				_importDataProxy.armatureDataProxy.updateBoneParent(boneName, boneParentName);
			}
			
			private function selectedBoneByDisplay(display:Object):void
			{
				var bone:Bone = _importDataProxy.armature.getBoneByDisplay(display);
				if(bone)
				{
					_importDataProxy.armatureDataProxy.changeBone(bone.name);
					_importDataProxy.animationDataProxy.changeMovementBone(bone.name);
				}
			}
			
			private function highlightBoneDisplay():void
			{
				if(_boneDisplaySelected)
				{
					_boneDisplaySelected.filters = null;
					_boneDisplaySelected = null;
				}
				if(_armatureDisplay)
				{
					var bone:Bone = _importDataProxy.armature.getBone(_importDataProxy.armatureDataProxy.boneName);
					if(bone)
					{
						_boneDisplaySelected = bone.display;
						if(_boneDisplaySelected)
						{
							if(_boneHighlightFilter.color)
							{
								_boneDisplaySelected.filters = [_boneHighlightFilter];
							}
							_boneDisplayRollOver = null;
						}
					}
				}
			}
			
			private var _movementUpdated:Boolean;
			
			private function playBtnHandler(e:Event):void
			{
				if(_importDataProxy.armature)
				{
					if(_importDataProxy.armature.animation.isPlaying)
					{
						_importDataProxy.armature.animation.stop();
					}
					else
					{
						if(_movementUpdated)
						{
							_importDataProxy.armature.animation.gotoAndPlay(_importDataProxy.animationDataProxy.movementName);
						}
						else
						{
							_importDataProxy.armature.animation.play();
						}
					}
					updatePlayAndPauseBtn();
					_movementUpdated = false;
				}
			}
			
			private function updatePlayAndPauseBtn():void
			{
				if(_importDataProxy.armature)
				{
					playBtn.enabled = true;
					if(_importDataProxy.armature.animation.isPause || _importDataProxy.armature.animation.isComplete)
					{
						//playBtn.label = resourceManager.getString('resources','play');
						playBtn.setStyle("icon", _playBitmap);
					}
					else
					{
						//playBtn.label = resourceManager.getString('resources','stop');
						playBtn.setStyle("icon", _pauseBitmap);
					}
				}
				else
				{
					playBtn.enabled = false;
					//playBtn.label = resourceManager.getString('resources','play');
					playBtn.setStyle("icon", _playBitmap);
				}
			}
			
		]]>
	</fx:Script>
	<s:Scroller id="scrollerViewer" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<s:Group>
			<s:Group id="viewContainerGroup">
				<mx:UIComponent id="viewContainer"/>
			</s:Group>
		</s:Group>
	</s:Scroller>
	<s:HGroup bottom="2" left="2" right="2" width="100%" verticalAlign="middle" gap="2">
		<s:Button id="btnZoomOut" width="32" label="－"/>
		<s:HSlider id="sliderScale" width="400%" maxWidth="100"
				   minimum="0.1" maximum="10" snapInterval="0.1"/>
		<s:Button id="btnZoomIn" width="32" label="＋"/>
		<s:Spacer width="100%"/>
		<components:ColorPickerNoColor label="{resourceManager.getString('resources','boneHighlight')}"
									   selectedColor="@{SettingDataProxy.getInstance().boneHighlightColor}"/>
	</s:HGroup>
	<s:Button id="playBtn" right="2" top="2" width="22" height="22"/>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1"/>
		</s:stroke>
	</s:Rect>
</s:Group>
