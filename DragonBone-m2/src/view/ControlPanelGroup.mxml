<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:components="view.components.*"
		  width="100%" height="100%" gap="0"
		  creationComplete="this_creationCompleteHandler(event)" xmlns:view="view.*">
	<fx:Script>
		<![CDATA[
			import control.ExportExpandDataCommand;
			import control.LoadFLADataCommand;
			
			import dragonBones.utils.ConstValues;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.JSFLProxy;
			import model.SettingDataProxy;
			
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			private static const AT_NAME:String = ConstValues.AT + ConstValues.A_NAME;
			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			protected function this_creationCompleteHandler(event:FlexEvent):void
			{
				movementList.dataProvider = _importDataProxy.animationDataProxy.movementsMC;
				movementList.addEventListener(IndexChangeEvent.CHANGE, movementList_onChange);
				
				boneTree.addEventListener(ListEvent.CHANGE, boneHandler);
				boneTree.addEventListener(DragEvent.DRAG_COMPLETE, boneHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ARMATURE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_MOVEMENT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.ITEM_ATTR_GOT, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.UPDATE_BONE_PARENT, commandHandler);		
			}
			
			private function movementList_onChange(e:Event):void
			{
				var movementXML:XML = movementList.selectedItem as XML;
				var movementName:String = movementXML?movementXML.attribute(ConstValues.A_NAME):"";
				_importDataProxy.animationDataProxy.changeMovement(movementName);
			}
			
			private function boneHandler(e:Event):void
			{
				switch(e.type)
				{
					case ListEvent.CHANGE:
						var boneXML:XML = boneTree.selectedItem as XML;
						var boneName:String = boneXML?boneXML.attribute(ConstValues.A_NAME):"";
						_importDataProxy.armatureDataProxy.changeBone(boneName);
						_importDataProxy.animationDataProxy.changeMovementBone(boneName);
						
						refreshBone();
						break;
					case DragEvent.DRAG_COMPLETE:
						if(boneTree.lastMoveNode)
						{
							boneName = boneTree.lastMoveNode.attribute(ConstValues.A_NAME);
							var parentXML:XML = boneTree.lastMoveNode.parent();
							var parentName:String = parentXML.attribute(ConstValues.A_NAME);
							if(parentXML.name() != boneTree.lastMoveNode.name())
							{
								parentName = null;
							}
							
							_importDataProxy.armatureDataProxy.updateBoneParent(boneName, parentName);
						}
						break;
				}
			}
			
			private function refreshBone(){
				var boneXML:XML = boneTree.selectedItem as XML;
				var boneName:String = boneXML?boneXML.attribute(ConstValues.A_NAME):""; 
				var armatureName= _importDataProxy.armatureDataProxy.armatureName;	 
				LoadFLADataCommand.instance.readAttr(armatureName,boneName,"align"); 
			}
			
			private function commandHandler(e:Message):void
			{
				switch(e.type)
				{
					case MessageDispatcher.CHANGE_ARMATURE_DATA:
					case MessageDispatcher.UPDATE_BONE_PARENT:
						boneTree.dataProvider = _importDataProxy.armatureDataProxy.bonesMC;
						boneTree.validateNow();
						for each(var _item:Object in boneTree.dataProvider)
						{
							boneTree.expandChildrenOf(_item, true);
						}
						if(e.type == MessageDispatcher.UPDATE_BONE_PARENT)
						{
							boneTree.selectItemByName(e.parameters[0]);
						}
						refreshBone();
						break;
					case MessageDispatcher.CHANGE_MOVEMENT_DATA:
						movementList.selectedItem = getListItemByName(movementList, e.parameters[0]);
						break;
					case MessageDispatcher.CHANGE_BONE_DATA:
						boneTree.selectItemByName(e.parameters[0]);
						refreshBone();
						break;
					case MessageDispatcher.ITEM_ATTR_GOT:
						
						for(var i:int=0;i<8;i++){ 
							(RadioButton(this["align"+i])).selected=false;
						}
						
						
						for(var i:int=0;i<=2;i++){ 
							(RadioButton(this["effect"+i])).selected=false;
						}
						if(e.parameters[0]){  
							tagInput.text=getXmlData( e.parameters[0] as XML,"tag");
							eventInput.text=getXmlData( e.parameters[0] as XML,"event");
							var align:String=getXmlData( e.parameters[0] as XML,"align");
							var clickEffect:String=getXmlData( e.parameters[0] as XML,"clickEffect");
							if(align!=""){ 
								(RadioButton(this["align"+align])).selected=true;
							}
							if(clickEffect!=""){ 
								(RadioButton(this["effect"+clickEffect])).selected=true;
							}
						}else{
							eventInput.text="";
							tagInput.text="";
						}
						
						
						break;
				}
			}
			
			private function getListItemByName(list:List, itemName:String):XML
			{
				for each(var eachItem:XML in list.dataProvider)
				{
					if(eachItem.attribute(ConstValues.A_NAME) == itemName)
					{
						return eachItem;
					}
				}
				return null;
			}
			
			protected function behaviorAdvancedSwitch_clickHandler(event:MouseEvent):void
			{
				if(behaviorAdvancedControlPanel.width == 0 )
				{
					behaviorAdvancedControlPanel.width = 150;
					behaviorAdvancedSwitch.label = ">>";
				}
				else
				{
					behaviorAdvancedControlPanel.width = 0;
					behaviorAdvancedSwitch.label = "<<";
				}
			}
			
			protected function boneAdvancedSwitch_clickHandler(event:MouseEvent):void
			{
				if(boneAdvancedControlPanel.width == 0 )
				{
					boneAdvancedControlPanel.width = 150;
					boneAdvancedSwitch.label = ">>";
				}
				else
				{
					boneAdvancedControlPanel.width = 0;
					boneAdvancedSwitch.label = "<<";
				}
			}
			
			protected function onSelectAlign(tag:int):void{
				
				var boneXML:XML = boneTree.selectedItem as XML;
				var boneName:String = boneXML?boneXML.attribute(ConstValues.A_NAME):""; 
				
				var armatureName:String= _importDataProxy.armatureDataProxy.armatureName;	 
				JSFLProxy.getInstance().setMcAttr(armatureName,boneName,"align",tag.toString()); 
				
				
			 
				
			}
			
			
			protected function onSelectEffect(tag:int):void{
				
				var boneXML:XML = boneTree.selectedItem as XML;
				var boneName:String = boneXML?boneXML.attribute(ConstValues.A_NAME):""; 
				
				var armatureName:String= _importDataProxy.armatureDataProxy.armatureName;	 
				JSFLProxy.getInstance().setMcAttr(armatureName,boneName,"clickEffect",tag.toString());  
				
			}
			
			
			
			protected function getXmlData(xml:XML,key:String):String{
				for each (var property:XML in xml.item){
					if(property.@key==key){
						return property.@data
					}
				}
				return "";
			}
			
			protected function  onTagEdited():void{
				var boneXML:XML = boneTree.selectedItem as XML;
				var boneName:String = boneXML?boneXML.attribute(ConstValues.A_NAME):""; 
				
				var armatureName:String= _importDataProxy.armatureDataProxy.armatureName;	 
				JSFLProxy.getInstance().setMcAttr(armatureName,boneName,"tag",tagInput.text);  
				
				 
					
			}
			
			protected function  onEventEdited():void{
				var boneXML:XML = boneTree.selectedItem as XML;
				var boneName:String = boneXML?boneXML.attribute(ConstValues.A_NAME):""; 
				
				var armatureName:String= _importDataProxy.armatureDataProxy.armatureName;	 
				JSFLProxy.getInstance().setMcAttr(armatureName,boneName,"event",eventInput.text);  
				
				
				
			}
			
			
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<mx:VDividedBox width="100%" height="100%">
		<s:VGroup width="100%" height="0" gap="-1"  visible="false">
			<s:HGroup width="100%" gap="-1">
				<s:Button width="100%" height="24" label="{resourceManager.getString('resources','behaviorList')}"
						  cornerRadius="0" fontWeight="bold"/>
				<s:Button id="behaviorAdvancedSwitch" width="35" height="24" label="&lt;&lt;"
						  cornerRadius="0" click="behaviorAdvancedSwitch_clickHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%" height="100%" gap="-1">
				<s:List id="movementList" minWidth="110" width="100%" height="100%" labelField="{AT_NAME}" borderColor="#000000"/>
				<view:BehaviorAdvancedControlPanel id="behaviorAdvancedControlPanel" width="0" height="100%"/>
			</s:HGroup>
		</s:VGroup>
		
		<mx:HBox width="100%" height="100%"   > 
			<mx:VBox width="50%" height="100%" >
				<s:Panel width="100%" height="100%" title="对齐方式">
					<s:RadioButton id="align0" groupName="align" left="20" top="20"    click="onSelectAlign(0)"/>
					<s:RadioButton id="align3" groupName="align" left="20" verticalCenter="0"   click="onSelectAlign(3)" />
					<s:RadioButton id="align4" groupName="align" horizontalCenter="0" verticalCenter="0"   click="onSelectAlign(4)"/>
					<s:RadioButton id="align7" groupName="align" bottom="20" horizontalCenter="0"   click="onSelectAlign(7)"/>
					<s:RadioButton id="align8" groupName="align" right="20" bottom="20"   click="onSelectAlign(8)"/>
					<s:RadioButton id="align5" groupName="align" right="20" verticalCenter="0"   click="onSelectAlign(5)"/>
					<s:RadioButton id="align2" groupName="align" right="20" top="20"   click="onSelectAlign(2)"/>
					<s:RadioButton id="align1" groupName="align" top="20" horizontalCenter="0"   click="onSelectAlign(1)"/>
					<s:RadioButton id="align6" groupName="align" left="20" bottom="20"   click="onSelectAlign(6)" />
				</s:Panel>
				<s:Panel  width="100%" height="100%" title="按钮"> 
					<s:Label x="29" y="14" text="事件&#xd;"/>
					<s:TextInput id="eventInput" left="71" right="10" top="9"
								 keyUp="onEventEdited()"/>
					<s:RadioButton id="effect0" left="25" top="47" label="无效果"
								   click="onSelectEffect(0)" groupName="effect"/>
					<s:RadioButton id="effect1" left="95" top="48" label="放大"
								   click="onSelectEffect(1)" groupName="effect"/>
					<s:RadioButton id="effect2" left="154" top="48" width="42" label="变暗"
								   click="onSelectEffect(2)" groupName="effect"/>
					
				</s:Panel>
			</mx:VBox>
			
			<mx:VBox width="50%" height="100%" >
				<s:Panel width="100%" height="100%"  title="属性"> 
					<s:Label x="19" y="10" text="Tag&#xd;"/>
					<s:TextInput id="tagInput" y="5" left="51" right="10" keyUp="onTagEdited()"/>
				</s:Panel> 
			</mx:VBox>
			
		
		</mx:HBox>
		<s:VGroup width="100%" height="100%" gap="-1">
			<s:HGroup width="100%" gap="-1">
				<s:Button width="100%" height="24" label="{resourceManager.getString('resources','boneTree')}"
					  cornerRadius="0" fontWeight="bold"/>
				<s:Button id="boneAdvancedSwitch" width="35" height="24" label="&lt;&lt;"
						  cornerRadius="0" click="boneAdvancedSwitch_clickHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%" height="100%" gap="-1">
				<components:DragTree id="boneTree" minWidth="110" width="100%" height="100%" dragEnabled="true"
									 dropEnabled="true" labelField="{AT_NAME}" textRollOverColor="#CCCCCC"
									 textSelectedColor="#CCCCCC"/>
				<view:BoneAdvancedControlPanel id="boneAdvancedControlPanel" width="0" height="100%"/>
			</s:HGroup>
		</s:VGroup>
	</mx:VDividedBox>
</s:VGroup>
